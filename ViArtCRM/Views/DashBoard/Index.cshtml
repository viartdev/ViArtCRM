@model ViArtCRM.Models.TaskContainer

@{
    ViewData["Title"] = "Scheduler";
}

<environment include="Development">
    <link rel="stylesheet" href="~/css/Scheduler.css" />
    @*<link rel="stylesheet" href="~/css/drag-drop.css" />*@
</environment>
<style type="text/css">
    td {
        vertical-align: top;
    }

    .draggingStyle {
        background-color: lightblue;
    }

    .targetGrid {
        background-color: lightcoral;
    }

    .redline {
        background-color: #ffbcbc !important;
    }

    .yellowline {
        background-color: #edf397 !important;
    }

    .greenline {
        background-color: #60d8a1 !important;
    }

    .moveButton {
        width: 100%;
        margin-top: 10px;
    }

    .subtasks-btn {
        width: 100%;
        margin-top: 10px;
    }

    .tabletext {
        padding-top: 20px;
        padding-bottom: 20px
    }

    .subtask-content {
        /*width:30%;*/
    }

    .modalless {
        /*top: 10%;
        left: 50%;
        bottom: auto;
        right: auto;
        margin-left: -300px;*/
    }
</style>

@*<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min.js"></script>*@

@*<script src="~/js/AjaxMove.js" type="text/javascript"></script>*@
<script src="~/js/TimeEqual.js" type="text/javascript"></script>
<script src="~/js/RefreshModule.js" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {

        RefreshContainer(0,@Model.ModuleID, 0);
        RefreshContainer(1,@Model.ModuleID, 1);
        RefreshContainer(2,@Model.ModuleID, 2);


    });
    function GetContainerName(containerNumber) {
        switch (containerNumber) {
            case 0:
                return 'todoBody';
                break;
            case 1:
                return 'moderateBody';
                break;
            case 2:
                return 'completeBody';
                break;
            default:
                return 'error'
                break;
        }
    }
    function RefreshContainer(containerNumber, moduleID, taskStatus) {
        var containerName = GetContainerName(parseInt(containerNumber));
        var string = '@Url.Action("LoadModule","DashBoard")?taskStatus=' + taskStatus + '&moduleID=' + moduleID;
        $('#' + containerName).hide().load(string, UpdateModuleAfterAjax).fadeIn('5000');
    }
    function UpdateModuleAfterAjax() {
        UpdateTimeColoros();
        UpdateMoveButtonsActions();
        UpdateEditButtonsActions();
        UpdateSubTasksButtons();
        updateCloseButton();
        UpdateSaveEditButtonAction();
    }
    function GetFormData(formID) {
        var editForm = $('#' + formID);
        var inputs = $(editForm).children('div').children('input');
        var formData = {};
        for (var i = 0; i < inputs.length; i++) {
            formData[inputs[i].id] = inputs[i].value
        }
        return formData;
    }

    function UpdateSaveEditButtonAction() {
        $('.saveEdit').click(function (e) {
            e.preventDefault();
            console.log("click");
            var data = GetFormData('editModalForm');

            $.ajax({
                url: '/DashBoard/EditMethod',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: "application/json",
                dataType: 'json',
                error: function (xhr, ajaxOptions, thrownError) {                  
                    alert(xhr.toString())
                    alert(ajaxOptions.toString())
                    alert(thrownError.toString())
                },
                success: function (result) {                   
                    var isOk = result.success == 'ok';
                    RefreshContainer(currentEditingTaskStatus,@Model.ModuleID, currentEditingTaskStatus);
                    RefreshContainer(data.Status,@Model.ModuleID, data.Status);
                },
                async: true,
                processData: false
            });
        });
    }

    function UpdateTimeColoros() {
        var one_day = 1000 * 60 * 60 * 24;
        $(".card #date").each(function (index) {
            date = new Date($(".card #date")[index].innerHTML);
            datems = date.getTime();
            datenow = Date.now();
            diff = datems - datenow;
            diffdays = Math.round(diff / one_day);
            item = $(".card .card-header").eq(index);
            if (diffdays <= 2)
                item.addClass("redline");
            else if (diffdays > 2 && diffdays <= 6)
                item.addClass("yellowline");
            else if (diffdays > 6)
                item.addClass("greenline");
        });
    }
    function UpdateMoveButtonsActions() {
        $('.moveButton').click(function (e) {
            e.preventDefault();
            console.log("click");
            var data = {
                taskID: $(this).data("taskid"),
                currentTaskStatus: $(this).data("taskstatus")
            };
            $.ajax({
                url: '/DashBoard/Move',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: "application/json",
                dataType: 'json',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    var isOk = result.success == 'ok';
                    RefreshContainer(data.currentTaskStatus,@Model.ModuleID, data.currentTaskStatus);
                    RefreshContainer(data.currentTaskStatus+1,@Model.ModuleID, data.currentTaskStatus+1);
                },
                async: true,
                processData: false
            });
        });
    }
    var currentEditingTaskStatus;
    function OnEditLoadComplete() {
        var data = GetFormData("editModalForm");
        currentEditingTaskStatus = data.Status;
        UpdateSaveEditButtonAction();
    }
    function UpdateEditButtonsActions() {
        $('.editButton').on('click',function () {
            var taskID = $(this).data('taskid');
            console.log(taskID);
            var containerName = "editModalWindow";
            var string = '@Url.Action("Edit","DashBoard")?taskID=' + taskID;
            $('#' + containerName).load(string,OnEditLoadComplete);
        });
    }
    function UpdateSubTasksButtons() {
        $('.todo-btn').on('click',function () {
            var taskID = $(this).data('taskid');
            console.log(taskID);
            var card = $('[data-taskid="' + taskID + '"]')[0];
            var cardWidth = $(card).width();
            var cardOffset = {
                "top": $(card).offset().top,
                "left": $(card).offset().left + cardWidth
            }
            var modal = $('#subtasksContent')[0];
            setTimeout(function () { $(modal).offset(cardOffset); }, 20);

            var containerName = "subtasksForm";
            var string = '@Url.Action("ToDoSubTasks", "DashBoard")?taskID=' + taskID;
            $('#' + containerName).load(string);
        });
         $('.moderate-btn').on('click',function () {
            var taskID = $(this).data('taskid');
            console.log(taskID);
            var card = $('[data-taskid="' + taskID + '"]')[0];
            var cardWidth = $(card).width();
            var cardOffset = {
                "top": $(card).offset().top,
                "left": $(card).offset().left + cardWidth
            }
            var modal = $('#subtasksContent')[0];
            setTimeout(function () { $(modal).offset(cardOffset); }, 20);

            var containerName = "subtasksForm";
            var string = '@Url.Action("ModerateSubTasks", "DashBoard")?taskID=' + taskID;
            $('#' + containerName).load(string);
        });
    }
    function updateCloseButton() {
        $(".closeSubTask").on("click", function () {
            RefreshContainer(1,@Model.ModuleID, 1);
        });
    }
</script>

<div id="todo-zone" class="jumbotron ">
    <div class="row">
        <div class="col-lg-6">
            <h1 class="tabletext">To Do</h1>
        </div>
        <div class="col-lg-6" align="right">
            @Html.ActionLink("Create A New Task", "Create", "DashBoard", new { moduleID = Model.ModuleID }, new { @class = "btn btn-outline-info btn-large createButton" })
        </div>
    </div>
    <div id="todoBody" class="row">
    </div>
</div>
<div id="moderate-zone" class="jumbotron ">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="tabletext">In Moderate</h1>
        </div>
    </div>
    <div id="moderateBody" class="row">
    </div>
</div>
<div id="complete-zone" class="jumbotron ">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="tabletext">Completed</h1>
        </div>
    </div>
    <div id="completeBody" class="row">
    </div>
</div>
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="editModalWindow">

            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>
<div class="modal fade modalless border border-warning" id="subTusksDialog" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div id="subtasksContent" class="modal-content subtask-content" style="background-color: rgb(255, 255, 255); color: white;">
            <div class="modal-header">
                <h5 class="modal-title" id="subtasks-title" style="color:black;">SubTasks</h5>
                <button type="button" class="close closeSubTask" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="subtasksForm">

            </div>

        </div>
    </div>
</div>




